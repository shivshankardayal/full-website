import fontsize;
import animation;

animation a;

defaultpen(fontsize(16pt));
defaultpen(linewidth(1));

path p = (-2cm, .5cm) -- (-1cm, .5cm) -- (-1cm, 1.5cm) -- (-2cm, 1.5cm) -- cycle;
draw(p);
path p = (1cm, .5cm) -- (2cm, .5cm) -- (2cm, 1.5cm) -- (1cm, 1.5cm) -- cycle;
draw(p);
path p = (-5cm, .5cm) -- (-4cm, .5cm) -- (-4cm, 1.5cm) -- (-5cm, 1.5cm) -- cycle;
draw(p);
path p = (4cm, .5cm) -- (5cm, .5cm) -- (5cm, 1.5cm) -- (4cm, 1.5cm) -- cycle;
draw(p);
label("10", (-4.5cm, 1cm));
label("20", (-1.5cm, 1cm));
label("30", (4.5cm, 1cm));
label("40", (1.5cm, 1cm));
label("$next$", (-3.2cm, 1.3cm));
label("$next$", (-.2cm, 1.3cm));
label("$next$", (2.8cm, 1.3cm));
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (1cm, 1cm), EndArrow);
draw((2cm, 1cm) -- (4cm, 1cm), EndArrow);
label("$*head$", (-7cm, 1cm));
label("$NULL$", (7cm, 1cm));
draw((-6cm, 1cm) -- (-5cm, 1cm), EndArrow);
draw((5cm, 1cm) -- (6cm, 1cm), EndArrow);
label("$current$", (-4.5cm, 2.5cm));
draw((-4.5cm, 2.2cm) -- (-4.5cm, 1.5cm), EndArrow);
label("$rreverse$ is called with $\&head$ and $head$", (0cm, 0cm));
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (1cm, 1cm), EndArrow);
draw((2cm, 1cm) -- (4cm, 1cm), EndArrow);
label("$*head$", (-7cm, 1cm));
label("$NULL$", (7cm, 1cm));
draw((-6cm, 1cm) -- (-5cm, 1cm), EndArrow);
draw((5cm, 1cm) -- (6cm, 1cm), EndArrow);
label("$current$", (-1.5cm, 2.5cm));
draw((-1.5cm, 2.2cm) -- (-1.5cm, 1.5cm), EndArrow);
label("$rreverse$ is called with $current$ moving to next node.", (0cm, 0cm));
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (1cm, 1cm), EndArrow);
draw((2cm, 1cm) -- (4cm, 1cm), EndArrow);
label("$*head$", (-7cm, 1cm));
label("$NULL$", (7cm, 1cm));
draw((-6cm, 1cm) -- (-5cm, 1cm), EndArrow);
draw((5cm, 1cm) -- (6cm, 1cm), EndArrow);
label("$current$", (1.5cm, 2.5cm));
draw((1.5cm, 2.2cm) -- (1.5cm, 1.5cm), EndArrow);
label("$rreverse$ is called with $current$ moving to next node.", (0cm, 0cm));
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (1cm, 1cm), EndArrow);
draw((2cm, 1cm) -- (4cm, 1cm), EndArrow);
label("$NULL$", (7cm, 1cm));
draw((5cm, 1cm) -- (6cm, 1cm), EndArrow);
label("$current$", (4.5cm, 2.5cm));
draw((4.5cm, 2.2cm) -- (4.5cm, 1.5cm), EndArrow);
label("$rreverse$ is called with $current$ moving to next node.", (0cm, 0cm));
label("$current->next$ is $NULL$ so recursion stops. $*head$ is assigned $current$.", (0cm, -.5cm));
label("Code falls in else block.", (0cm, -1cm));
label("$*head$", (7cm, 2.5cm));
draw((6.2cm, 2.5cm) -- (5cm, 1.5cm), EndArrow);
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (1cm, 1cm), EndArrow);
draw((2cm, 1cm) -- (4cm, 1cm), EndArrow);
label("$NULL$", (7cm, 1cm));
draw((5cm, 1cm) -- (6cm, 1cm), EndArrow);
label("$current$", (1.5cm, 2.5cm));
draw((1.5cm, 2.2cm) -- (1.5cm, 1.5cm), EndArrow);
label("$rreverse$ returns. $current$ is now at previous value.", (0cm, 0cm));
label("$*head$", (7cm, 2.5cm));
draw((6.2cm, 2.5cm) -- (5cm, 1.5cm), EndArrow);
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (1cm, 1cm), EndArrow);
draw((2cm, 1cm) -- (3cm, 1cm) -- (3cm, .3cm), EndArrow);
draw((5cm, 1cm) -- (6cm, 1cm) -- (6cm, 2cm) -- (2.5cm, 2cm) -- (2cm, 1.5cm), EndArrow);
label("$current$", (1.5cm, 2.5cm));
draw((1.5cm, 2.2cm) -- (1.5cm, 1.5cm), EndArrow);
label("Now second $if$ is tested which is $true$.", (0cm, 0cm));
label("$current->next->next$ is $NULL$ which is assigned $current$.", (0cm, -.5cm));
label("$current->next$ is assigned $NULL$.", (0cm, -1cm));
label("$*head$", (7cm, 2.5cm));
draw((6.2cm, 2.5cm) -- (5cm, 1.5cm), EndArrow);
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (1cm, 1cm), EndArrow);
draw((2cm, 1cm) -- (3cm, 1cm) -- (3cm, .3cm), EndArrow);
draw((5cm, 1cm) -- (6cm, 1cm) -- (6cm, 2cm) -- (2.5cm, 2cm) -- (2cm, 1.5cm), EndArrow);
label("$current$", (-1.5cm, 2.5cm));
draw((-1.5cm, 2.2cm) -- (-1.5cm, 1.5cm), EndArrow);
label("$*head$", (7cm, 2.5cm));
draw((6.2cm, 2.5cm) -- (5cm, 1.5cm), EndArrow);
label("$rreverse$ returns. $current$ is now at previous value.", (0cm, 0cm));
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (0cm, 1cm) -- (0cm, .3cm), EndArrow);
draw((1.5cm, 1.5cm) -- (1.5cm, 2cm) -- (-.5cm, 2cm) -- (-1cm, 1.5cm), EndArrow);
draw((4cm, 1cm) -- (2cm, 1cm), EndArrow);
label("$current$", (-1.5cm, 2.5cm));
draw((-1.5cm, 2.2cm) -- (-1.5cm, 1.5cm), EndArrow);
label("$*head$", (7cm, 2.5cm));
label("Now second $if$ is tested which is $true$.", (0cm, 0cm));
label("$current->next->next$ is $NULL$ which is assigned $current$.", (0cm, -.5cm));
label("$current->next$ is assigned $NULL$.", (0cm, -1cm));
draw((6.2cm, 2.5cm) -- (5cm, 1.5cm), EndArrow);
a.add();
erase();
restore();
save();
draw((-4cm, 1cm) -- (-2cm, 1cm), EndArrow);
draw((-1cm, 1cm) -- (0cm, 1cm) -- (0cm, .3cm), EndArrow);
draw((1.5cm, 1.5cm) -- (1.5cm, 2cm) -- (-.5cm, 2cm) -- (-1cm, 1.5cm), EndArrow);
draw((4cm, 1cm) -- (2cm, 1cm), EndArrow);
label("$current$", (-4.5cm, 2.5cm));
draw((-4.5cm, 2.2cm) -- (-4.5cm, 1.5cm), EndArrow);
label("$*head$", (7cm, 2.5cm));
draw((6.2cm, 2.5cm) -- (5cm, 1.5cm), EndArrow);
label("$rreverse$ returns. $current$ is now at previous value.", (0cm, 0cm));
label("Now we are on first call.", (0cm, -.5cm));
a.add();
erase();
restore();
draw((-4cm, 1cm) -- (-3cm, 1cm) -- (-3cm, .3cm), EndArrow);
draw((-1.5cm, 1.5cm) -- (-1.5cm, 2cm) -- (-3.5cm, 2cm) -- (-4cm, 1.5cm), EndArrow);
draw((1cm, 1cm) -- (-1cm, 1cm), EndArrow);
draw((4cm, 1cm) -- (2cm, 1cm), EndArrow);
label("$current$", (-4.5cm, 2.5cm));
draw((-4.5cm, 2.2cm) -- (-4.5cm, 1.5cm), EndArrow);
label("$*head$", (7cm, 2.5cm));
draw((6.2cm, 2.5cm) -- (5cm, 1.5cm), EndArrow);
label("Now second $if$ is tested which is $true$.", (0cm, 0cm));
label("$current->next->next$ is $NULL$ which is assigned $current$.", (0cm, -.5cm));
label("$current->next$ is assigned $NULL$. It is reversed now.", (0cm, -1cm));
a.add();

a.movie(BBox(0.0cm), loops=-1, delay=250);
